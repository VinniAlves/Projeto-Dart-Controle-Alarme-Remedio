import 'package:flutter/material.dart';

void main() {
  runApp(telamenu());
}

class telamenu extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Segunda Tela',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SecondScreen(),
    );
  }
}

class Event {
  final DateTime dateTime;
  final String description;

  Event({required this.dateTime, required this.description});
}

class SecondScreen extends StatefulWidget {
  @override
  _SecondScreenState createState() => _SecondScreenState();
}

class _SecondScreenState extends State<SecondScreen> {
  List<Event> events = [];

  void addEvent(Event event) {
    setState(() {
      events.add(event);
    });
  }

  void editEvent(Event event, int index) {
    setState(() {
      events[index] = event;
    });
  }

  void deleteEvent(int index) {
    setState(() {
      events.removeAt(index);
    });
  }

  void showAddEventModal(BuildContext context) {
    DateTime selectedDate = DateTime.now();
    TimeOfDay selectedTime = TimeOfDay.now();
    String description = '';

    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              padding: EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Adicionar Evento',
                    style:
                        TextStyle(fontSize: 20.0, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 16.0),
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () async {
                            final selectedDateResult = await showDatePicker(
                              context: context,
                              initialDate: selectedDate,
                              firstDate: DateTime(2000),
                              lastDate: DateTime(2100),
                            );

                            if (selectedDateResult != null) {
                              setState(() {
                                selectedDate = selectedDateResult;
                              });
                            }
                          },
                          child: Text('Selecionar Data'),
                        ),
                      ),
                      SizedBox(width: 16.0),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () async {
                            final selectedTimeResult = await showTimePicker(
                              context: context,
                              initialTime: selectedTime,
                            );

                            if (selectedTimeResult != null) {
                              setState(() {
                                selectedTime = selectedTimeResult;
                              });
                            }
                          },
                          child: Text('Selecionar Hora'),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16.0),
                  TextField(
                    decoration: InputDecoration(
                      labelText: 'Descrição',
                    ),
                    onChanged: (value) {
                      setState(() {
                        description = value;
                      });
                    },
                  ),
                  SizedBox(height: 16.0),
                  ElevatedButton(
                    onPressed: () {
                      Event event = Event(
                        dateTime: DateTime(
                          selectedDate.year,
                          selectedDate.month,
                          selectedDate.day,
                          selectedTime.hour,
                          selectedTime.minute,
                        ),
                        description: description,
                      );

                      addEvent(event);
                      Navigator.pop(context);
                    },
                    child: Text('Salvar'),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  void showEditEventModal(BuildContext context, Event event, int index) {
    DateTime selectedDate = event.dateTime;
    TimeOfDay selectedTime = TimeOfDay.fromDateTime(event.dateTime);
    String description = event.description;

    showModalBottomSheet(
      context: context,
      builder: (BuildContext context) {
        return StatefulBuilder(
          builder: (BuildContext context, StateSetter setState) {
            return Container(
              padding: EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    'Editar Evento',
                    style:
                        TextStyle(fontSize: 20.0, fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 16.0),
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () async {
                            final selectedDateResult = await showDatePicker(
                              context: context,
                              initialDate: selectedDate,
                              firstDate: DateTime(2000),
                              lastDate: DateTime(2100),
                            );

                            if (selectedDateResult != null) {
                              setState(() {
                                selectedDate = selectedDateResult;
                              });
                            }
                          },
                          child: Text('Selecionar Data'),
                        ),
                      ),
                      SizedBox(width: 16.0),
                      Expanded(
                        child: ElevatedButton(
                          onPressed: () async {
                            final selectedTimeResult = await showTimePicker(
                              context: context,
                              initialTime: selectedTime,
                            );

                            if (selectedTimeResult != null) {
                              setState(() {
                                selectedTime = selectedTimeResult;
                              });
                            }
                          },
                          child: Text('Selecionar Hora'),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 16.0),
                  TextField(
                    decoration: InputDecoration(
                      labelText: 'Descrição',
                    ),
                    onChanged: (value) {
                      setState(() {
                        description = value;
                      });
                    },
                    controller: TextEditingController(text: description),
                  ),
                  SizedBox(height: 16.0),
                  ElevatedButton(
                    onPressed: () {
                      Event editedEvent = Event(
                        dateTime: DateTime(
                          selectedDate.year,
                          selectedDate.month,
                          selectedDate.day,
                          selectedTime.hour,
                          selectedTime.minute,
                        ),
                        description: description,
                      );

                      editEvent(editedEvent, index);
                      Navigator.pop(context);
                    },
                    child: Text('Salvar'),
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Controle Remedios'),
        leading: IconButton(
          icon: Icon(Icons.arrow_back),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
      ),
      body: ListView.builder(
        itemCount: events.length,
        itemBuilder: (BuildContext context, int index) {
          Event event = events[index];

          return ListTile(
            title: Text(event.description),
            subtitle: Text(event.dateTime.toString()),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  onPressed: () => showEditEventModal(context, event, index),
                  icon: Icon(Icons.edit),
                ),
                IconButton(
                  onPressed: () => deleteEvent(index),
                  icon: Icon(Icons.delete),
                ),
              ],
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => showAddEventModal(context),
        child: Icon(Icons.add),
      ),
    );
  }
}
